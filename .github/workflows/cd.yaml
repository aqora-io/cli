name: Release

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  merge_group:
  workflow_dispatch:

permissions:
  contents: read

env:
  SENTRY_DSN: ${{ vars.SENTRY_DSN }}

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, aarch64, armv7] # s390x, ppc64le, x86 : https://github.com/rust-lang/cargo/issues/13546#issuecomment-2463102513
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Calculate openssl-vendored
        shell: bash
        id: is-openssl-vendored
        run: |
          if [[ "${{ startsWith(matrix.target, 'x86') }}" == "true" ]]; then
            echo "enabled=" >> $GITHUB_OUTPUT
          else
            echo "enabled=--features vendored-openssl" >> $GITHUB_OUTPUT
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter ${{ steps.is-openssl-vendored.outputs.enabled }} --features extension-module
          sccache: "true"
          manylinux: "manylinux2014"
          before-script-linux: |
            case "${{ matrix.target }}" in
              "aarch64" | "armv7" | "s390x" | "ppc64le")
                  # NOTE: pypa/manylinux docker images are Debian based
                  sudo apt-get update
                  sudo apt-get install -y pkg-config libssl-dev
                  sudo apt-get install -y cpanminus
                  sudo cpanm IPC::Cmd
                ;;
              "x86" | "x86_64")
                # NOTE: rust-cross/manylinux docker images are CentOS based
                yum update -y
                yum install -y openssl openssl-devel perl-IPC-Cmd 
                ;;
            esac
          docker-options: -e SENTRY_DSN
        env:
          # Workaround ring 0.17 build issue
          CFLAGS_aarch64_unknown_linux_gnu: "-D__ARM_ARCH=8"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: brew install openssl pkg-config
      - name: Set OpenSSL path
        run: echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: "true"
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing *

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: release
    steps:
      - uses: actions/checkout@v3
      - name: Docker setup
        uses: docker/setup-buildx-action@v3
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/aqora-io/cli
          flavor: |
            latest=false
          tags: |
            type=schedule
            type=ref,event=branch,prefix=${{ env.TAG_PREFIX }}branch-
            type=ref,event=tag,prefix=${{ env.TAG_PREFIX }}tag-
            type=ref,event=pr,prefix=${{ env.TAG_PREFIX }}pr-
            type=raw,value=latest,prefix=${{ env.TAG_PREFIX }},enable={{is_default_branch}}
      - name: Docker build and push
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
