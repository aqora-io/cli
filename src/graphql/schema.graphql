enum Action {
	ADD_COMPETITION_MEMBER
	ADD_EVENT_COMPETITION
	ADD_EVENT_MEMBER
	AWARD_BADGE
	CREATE_COMMENT
	CREATE_COMPETITION
	CREATE_COMPETITION_RULE_AGREEMENT
	CREATE_EVENT
	CREATE_ORGANIZATION
	CREATE_SUBMISSION_VERSION
	CREATE_TOPIC
	CREATE_USE_CASE_VERSION
	DELETE_COMMENT
	DELETE_COMPETITION
	DELETE_EVENT
	DELETE_ORGANIZATION
	DELETE_TOPIC
	DELETE_USER
	READ_COMMENT
	READ_COMPETITION
	READ_COMPETITION_MEMBERSHIP
	READ_COMPETITION_RULE
	READ_COMPETITION_RULE_AGREEMENT
	READ_EVENT
	READ_EVENT_COMPETITION
	READ_EVENT_MEMBERSHIP
	READ_PROJECT_VERSION
	READ_PROJECT_VERSION_EVALUATION
	READ_PROJECT_VERSION_FILE
	READ_TOPIC
	READ_USER_EMAIL
	READ_USER_PERMISSIONS
	REMOVE_COMPETITION_MEMBER
	REMOVE_EVENT_COMPETITION
	REMOVE_EVENT_MEMBER
	REMOVE_ORGANIZATION_MEMBER
	TRANSFER_COMPETITION_OWNERSHIP
	TRANSFER_EVENT_OWNERSHIP
	TRANSFER_ORGANIZATION_OWNERSHIP
	UPDATE_COMPETITION
	UPDATE_EVENT
	UPDATE_ORGANIZATION
	UPDATE_ORGANIZATION_MEMBERSHIP
	UPDATE_PROJECT_VERSION
	UPDATE_PROJECT_VERSION_FILE
	UPDATE_TOPIC
	UPDATE_USER
}

enum Badge {
	TEST
	UNKNOWN
}


type Comment implements Node {
	content: String!
	createdAt: DateTime!
	id: ID!
	author: User!
	topic: Topic!
	parent: Comment
	numChildren: Int!
	children(after: String, before: String, first: Int, last: Int): CommentConnection!
	viewerCan(action: Action!, asEntity: ID): Boolean!
}

type CommentConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CommentEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Comment!]!
}

"""
An edge in a connection.
"""
type CommentEdge {
	"""
	The item at the end of the edge
	"""
	node: Comment!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type Competition implements Node {
	slug: String!
	title: String!
	shortDescription: String!
	description: String
	createdAt: DateTime!
	isPrivate: Boolean!
	id: ID!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	host: Entity!
	useCase: UseCase!
	latestRule: CompetitionRule!
	rules(after: String, before: String, first: Int, last: Int): CompetitionRuleConnection!
	entityRuleAgreements(after: String, before: String, first: Int, last: Int, entity: ID): CompetitionRuleAgreementConnection!
	banner: Url
	thumbnail: Url
	leaderboard(after: String, before: String, first: Int, last: Int): ProjectVersionEvaluationConnection!
	submissions(after: String, before: String, first: Int, last: Int, entityId: ID): SubmissionConnection!
	topics(after: String, before: String, first: Int, last: Int): TopicConnection!
	members(after: String, before: String, first: Int, last: Int): CompetitionMembershipConnection!
}

type CompetitionConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CompetitionEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Competition!]!
}

"""
An edge in a connection.
"""
type CompetitionEdge {
	"""
	The item at the end of the edge
	"""
	node: Competition!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type CompetitionMembership implements Node {
	kind: CompetitionMembershipKind!
	id: ID!
	entity: Entity!
	competition: Competition!
	viewerCan(action: Action!, asEntity: ID): Boolean!
}

type CompetitionMembershipConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CompetitionMembershipEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [CompetitionMembership!]!
}

"""
An edge in a connection.
"""
type CompetitionMembershipEdge {
	"""
	The item at the end of the edge
	"""
	node: CompetitionMembership!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum CompetitionMembershipKind {
	HOST
	PARTICIPANT
}

type CompetitionRule implements Node {
	text: String!
	createdAt: DateTime!
	id: ID!
	competition: Competition!
	entityAgreement(entity: ID): CompetitionRuleAgreement
}

type CompetitionRuleAgreement implements Node {
	createdAt: DateTime!
	id: ID!
	competitionRule: CompetitionRule!
	entity: Entity!
}

type CompetitionRuleAgreementConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CompetitionRuleAgreementEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [CompetitionRuleAgreement!]!
}

"""
An edge in a connection.
"""
type CompetitionRuleAgreementEdge {
	"""
	The item at the end of the edge
	"""
	node: CompetitionRuleAgreement!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type CompetitionRuleConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CompetitionRuleEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [CompetitionRule!]!
}

"""
An edge in a connection.
"""
type CompetitionRuleEdge {
	"""
	The item at the end of the edge
	"""
	node: CompetitionRule!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CreateCommentInput {
	content: String!
}

input CreateCompetitionInput {
	slug: String!
	title: String!
	shortDescription: String!
	description: String
	banner: Upload
	thumbnail: Upload
	isPrivate: Boolean!
}

input CreateEventInput {
	slug: String!
	title: String!
	shortDescription: String!
	description: String
	banner: Upload
	thumbnail: Upload
	isPrivate: Boolean!
}

type CreateMultipartUploadResponse {
	uploadId: String!
	urls: [Url!]!
}

input CreateOrganizationInput {
	username: String!
	displayName: String!
	github: String
	linkedin: String
	website: Url
	location: String
	bio: String
	image: Upload
}

input CreatePasswordResetInput {
	usernameOrEmail: String!
}

input CreateTopicInput {
	title: String!
	description: String
}

"""
Implement the DateTime<FixedOffset> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

interface Entity {
	id: ID!
	kind: EntityKind!
	username: String!
	displayName: String!
	image: Url
	imageThumbnail: Url
	location: String
	github: String
	linkedin: String
	website: String
	bio: String
	createdAt: DateTime!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	submissions(after: String, before: String, first: Int, last: Int, competitionId: ID): SubmissionConnection!
	badges(after: String, before: String, first: Int, last: Int): EntityBadgeConnection!
}

type EntityBadge implements Node {
	badge: Badge!
	createdAt: DateTime!
	id: ID!
}

type EntityBadgeConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EntityBadgeEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [EntityBadge!]!
}

"""
An edge in a connection.
"""
type EntityBadgeEdge {
	"""
	The item at the end of the edge
	"""
	node: EntityBadge!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type EntityConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EntityEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Entity!]!
}

"""
An edge in a connection.
"""
type EntityEdge {
	"""
	The item at the end of the edge
	"""
	node: Entity!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum EntityKind {
	USER
	ORGANIZATION
}

type Event implements Node {
	slug: String!
	title: String!
	shortDescription: String!
	description: String
	createdAt: DateTime!
	isPrivate: Boolean!
	id: ID!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	host: Entity!
	banner: Url
	thumbnail: Url
	members(after: String, before: String, first: Int, last: Int, userIsOrgMember: ID): EventMembershipConnection!
	competitions(after: String, before: String, first: Int, last: Int): EventCompetitionConnection!
}

type EventCompetition implements Node {
	id: ID!
	competition: Competition!
	event: Event!
	viewerCan(action: Action!, asEntity: ID): Boolean!
}

type EventCompetitionConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EventCompetitionEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [EventCompetition!]!
}

"""
An edge in a connection.
"""
type EventCompetitionEdge {
	"""
	The item at the end of the edge
	"""
	node: EventCompetition!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type EventConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EventEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Event!]!
}

"""
An edge in a connection.
"""
type EventEdge {
	"""
	The item at the end of the edge
	"""
	node: Event!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type EventMembership implements Node {
	kind: EventMembershipKind!
	id: ID!
	entity: Entity!
	event: Event!
	viewerCan(action: Action!, asEntity: ID): Boolean!
}

type EventMembershipConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EventMembershipEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [EventMembership!]!
}

"""
An edge in a connection.
"""
type EventMembershipEdge {
	"""
	The item at the end of the edge
	"""
	node: EventMembership!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum EventMembershipKind {
	HOST
	PARTICIPANT
}

type FileBrowser {
	"""
	List direct descendants of a directory.
	Each item in [`directory`] is a part of the path to be listed.
	"""
	readDir(directory: [String!]!): [FileBrowserEntry!]!
	"""
	Read contents of a file.
	Each item in [`path`] is a part of the path to be read.
	"""
	readFile(path: [String!]!): FileBrowserResult!
}

type FileBrowserEntry {
	parents: [String!]!
	name: String!
	fileType: FileBrowserEntryType!
	mimeType: String!
	mode: Int!
	size: Int!
}

enum FileBrowserEntryType {
	REGULAR
	DIRECTORY
	UNKNOWN
}

interface FileBrowserResult {
	entry: FileBrowserEntry!
	contents: String!
	encoding: String!
}

type FileBrowserResultAsBinary implements FileBrowserResult {
	"""
	Metadata of the file that has been read.
	"""
	entry: FileBrowserEntry!
	"""
	Contents of the file that has been read.
	"""
	contents: String!
	encoding: String!
}

type FileBrowserResultAsText implements FileBrowserResult {
	"""
	Metadata of the file that has been read.
	"""
	entry: FileBrowserEntry!
	"""
	Contents of the file that has been read.
	"""
	contents: String!
	encoding: String!
}

type FileBrowserResultTooLarge implements FileBrowserResult {
	"""
	Metadata of the file that has been read.
	"""
	entry: FileBrowserEntry!
	contents: String!
	encoding: String!
}




input LoginUserInput {
	usernameOrEmail: String!
	password: String!
}

type Mutation {
	signupUser(input: SignupUserInput!): UserEdge!
	loginUser(input: LoginUserInput!): UserEdge!
	logoutUser: Boolean!
	createPasswordReset(input: CreatePasswordResetInput!): Boolean!
	resetPassword(input: ResetPasswordInput!): Boolean!
	updateUser(id: ID!, input: UpdateUserInput!): UserEdge!
	deleteUser(id: ID!): ID!
	createCompetition(input: CreateCompetitionInput!): CompetitionEdge!
	updateCompetition(id: ID!, input: UpdateCompetitionInput!): CompetitionEdge!
	deleteCompetition(id: ID!): ID!
	createSubmissionVersion(competitionId: ID!, input: UpdateSubmissionInput!): ProjectVersionEdge!
	validateSubmissionVersion(projectVersionId: ID!): ProjectVersionEdge!
	createTopicForCompetition(competitionId: ID!, input: CreateTopicInput!): TopicEdge!
	updateTopic(id: ID!, input: UpdateTopicInput!): Topic!
	deleteTopic(id: ID!): ID!
	createCommentForTopic(topicId: ID!, input: CreateCommentInput!): CommentEdge!
	createCommentForComment(commentId: ID!, input: CreateCommentInput!): CommentEdge!
	deleteComment(id: ID!): ID!
	createOrganization(input: CreateOrganizationInput!): OrganizationEdge!
	deleteOrganization(id: ID!): ID!
	updateOrganization(id: ID!, input: UpdateOrganizationInput!): OrganizationEdge!
	updateOrganizationMembership(organizationId: ID!, userId: ID!, kind: OrganizationMembershipKind!): OrganizationMembershipEdge!
	removeOrganizationMember(id: ID!): ID!
	transferOrganizationOwnership(organizationId: ID!, toUserId: ID!): [OrganizationMembershipEdge!]!
	oauth2Authorize(input: Oauth2AuthorizeInput!): Oauth2AuthorizeOutput!
	oauth2Token(input: Oauth2TokenInput!): Oauth2TokenOutput!
	oauth2Refresh(input: Oauth2RefreshInput!): Oauth2TokenOutput!
	createUseCaseVersion(competitionId: ID!, input: UpdateUseCaseInput!): ProjectVersionEdge!
	validateUseCaseVersion(projectVersionId: ID!): ProjectVersionEdge!
	awardBadge(entityId: ID!, badge: Badge!): EntityBadgeEdge!
	withdrawBadge(id: ID!): ID!
	agreeToCompetitionRule(competition: ID!, asEntity: ID): CompetitionRuleAgreement!
	addCompetitionMember(competitionId: ID!, entityId: ID!): CompetitionMembershipEdge!
	removeCompetitionMember(id: ID!): ID!
	transferCompetitionOwnership(competitionId: ID!, toEntityId: ID!): [CompetitionMembershipEdge!]!
	createEvent(input: CreateEventInput!): EventEdge!
	updateEvent(id: ID!, input: UpdateEventInput!): EventEdge!
	deleteEvent(id: ID!): ID!
	addEventMember(eventId: ID!, entityId: ID!): EventMembershipEdge!
	removeEventMember(id: ID!): ID!
	transferEventOwnership(eventId: ID!, toEntityId: ID!): [EventMembershipEdge!]!
	addEventCompetition(eventId: ID!, competitionId: ID!): EventCompetitionEdge!
	removeEventCompetition(id: ID!): ID!
	createProjectVersionFileMultipartUpload(id: ID!, chunks: [Int!]!, contentType: String): CreateMultipartUploadResponse!
	completeProjectVersionFileMultipartUpload(id: ID!, uploadId: String!, eTags: [String!]!): ProjectVersionFile!
}

interface Node {
	id: ID!
}

input Oauth2AuthorizeInput {
	clientId: String!
	state: String
	redirectUri: Url
}

type Oauth2AuthorizeOutput {
	redirectUri: Url
	clientError: Boolean!
	unauthorized: Boolean!
}

input Oauth2RefreshInput {
	clientId: String!
	refreshToken: String!
}

type Oauth2Token {
	accessToken: String!
	refreshToken: String!
	expiresIn: Int!
	scope: String!
}

input Oauth2TokenInput {
	clientId: String!
	redirectUri: Url!
	code: String!
}

type Oauth2TokenOutput {
	issued: Oauth2Token
	clientError: Boolean!
	unauthorized: Boolean!
}

type Organization implements Entity & Node {
	username: String!
	displayName: String!
	location: String
	linkedin: String
	github: String
	website: String
	bio: String
	createdAt: DateTime!
	id: ID!
	kind: EntityKind!
	image: Url
	imageThumbnail: Url
	users(after: String, before: String, first: Int, last: Int): OrganizationMembershipConnection!
	submissions(after: String, before: String, first: Int, last: Int, competitionId: ID): SubmissionConnection!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	badges(after: String, before: String, first: Int, last: Int): EntityBadgeConnection!
	userMembership(user: ID): OrganizationMembership
}

"""
An edge in a connection.
"""
type OrganizationEdge {
	"""
	The item at the end of the edge
	"""
	node: Organization!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type OrganizationMembership implements Node {
	kind: OrganizationMembershipKind!
	id: ID!
	user: User!
	organization: Organization!
	viewerCan(action: Action!, asEntity: ID): Boolean!
}

type OrganizationMembershipConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [OrganizationMembershipEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [OrganizationMembership!]!
}

"""
An edge in a connection.
"""
type OrganizationMembershipEdge {
	"""
	The item at the end of the edge
	"""
	node: OrganizationMembership!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum OrganizationMembershipKind {
	OWNER
	ADMIN
	EDITOR
	READER
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

input Permission {
	to: Action!
	on: ID
	actingAs: ID
}

interface Project {
	id: ID!
	competition: Competition!
	name: String!
	viewerCan(action: Action!, asEntity: ID): Boolean!
}

type ProjectVersion implements Node {
	pythonRequires: String
	pyprojectToml: String!
	readme: String
	version: Semver!
	latest: Boolean!
	validatedAt: DateTime
	createdAt: DateTime!
	id: ID!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	entity: Entity!
	project: Project!
	files: [ProjectVersionFile!]!
	evaluation: ProjectVersionEvaluation
}

"""
An edge in a connection.
"""
type ProjectVersionEdge {
	"""
	The item at the end of the edge
	"""
	node: ProjectVersion!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type ProjectVersionEvaluation implements Node {
	score: Float
	error: String
	latest: Boolean!
	max: Boolean!
	finalizedAt: DateTime
	createdAt: DateTime!
	id: ID!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	projectVersion: ProjectVersion!
	submission: Submission!
}

type ProjectVersionEvaluationConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ProjectVersionEvaluationEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [ProjectVersionEvaluation!]!
}

"""
An edge in a connection.
"""
type ProjectVersionEvaluationEdge {
	"""
	The item at the end of the edge
	"""
	node: ProjectVersionEvaluation!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type ProjectVersionFile implements Node {
	kind: ProjectVersionFileKind!
	id: ID!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	projectVersion: ProjectVersion!
	downloadUrl: Url!
	uploadUrl: Url
	browse: FileBrowser!
}

enum ProjectVersionFileKind {
	DATA
	PACKAGE
	TEMPLATE
	SUBMISSION_EVALUATION
}

type Query {
	node(id: ID!): Node!
	viewer: User!
	competitions(after: String, before: String, first: Int, last: Int, search: String): CompetitionConnection!
	competitionBySlug(slug: String!): Competition
	entities(after: String, before: String, first: Int, last: Int, search: String, kinds: [EntityKind!]): EntityConnection!
	entityByUsername(username: String!): Entity
	events(after: String, before: String, first: Int, last: Int, search: String): EventConnection!
	eventBySlug(slug: String!): Event
}

input ResetPasswordInput {
	secret: String!
	password: String!
}

scalar Semver

input SignupUserInput {
	username: String!
	displayName: String!
	github: String
	linkedin: String
	website: Url
	location: String
	bio: String
	image: Upload
	email: String!
	password: String!
}


type Submission implements Project & Node {
	id: ID!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	latest: ProjectVersion
	competition: Competition!
	entity: Entity!
	name: String!
}

type SubmissionConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [SubmissionEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Submission!]!
}

"""
An edge in a connection.
"""
type SubmissionEdge {
	"""
	The item at the end of the edge
	"""
	node: Submission!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type Topic implements Node {
	title: String!
	description: String
	createdAt: DateTime!
	id: ID!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	author: Entity!
	competition: Competition
	numComments: Int!
	comments(after: String, before: String, first: Int, last: Int): CommentConnection!
}

type TopicConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [TopicEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Topic!]!
}

"""
An edge in a connection.
"""
type TopicEdge {
	"""
	The item at the end of the edge
	"""
	node: Topic!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input UpdateCompetitionInput {
	slug: String
	title: String
	shortDescription: String
	description: String
	banner: Upload
	thumbnail: Upload
	rules: String
	isPrivate: Boolean
}

input UpdateEventInput {
	slug: String
	title: String
	shortDescription: String
	description: String
	banner: Upload
	thumbnail: Upload
	isPrivate: Boolean
}

input UpdateOrganizationInput {
	username: String
	displayName: String
	github: String
	linkedin: String
	website: Url
	location: String
	bio: String
	image: Upload
}

input UpdateSubmissionInput {
	pyprojectToml: String!
	readme: String
}

input UpdateTopicInput {
	title: String
	description: String
}

input UpdateUseCaseInput {
	pyprojectToml: String!
	readme: String
}

input UpdateUserInput {
	username: String
	displayName: String
	github: String
	linkedin: String
	website: Url
	location: String
	bio: String
	image: Upload
	password: String
	oldPassword: String
	email: String
	jobTitle: String
	organization: String
}

scalar Upload

"""
URL is a String implementing the [URL Standard](http://url.spec.whatwg.org/)
"""
scalar Url

type UseCase implements Project & Node {
	id: ID!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	latest: ProjectVersion
	competition: Competition!
	name: String!
}

type User implements Entity & Node {
	username: String!
	displayName: String!
	location: String
	linkedin: String
	github: String
	website: String
	bio: String
	createdAt: DateTime!
	id: ID!
	kind: EntityKind!
	email: String!
	jobTitle: String
	organization: String
	image: Url
	imageThumbnail: Url
	"""
	can this user perform the action on the given resource
	"""
	can(action: Action!, on: ID, actingAs: ID): Boolean!
	organizations(after: String, before: String, first: Int, last: Int): OrganizationMembershipConnection!
	submissions(after: String, before: String, first: Int, last: Int, competitionId: ID): SubmissionConnection!
	topics(after: String, before: String, first: Int, last: Int): TopicConnection!
	comments(after: String, before: String, first: Int, last: Int): CommentConnection!
	viewerCan(action: Action!, asEntity: ID): Boolean!
	badges(after: String, before: String, first: Int, last: Int): EntityBadgeConnection!
	entities(permission: Permission, search: String, after: String, before: String, first: Int, last: Int): EntityConnection!
}

"""
An edge in a connection.
"""
type UserEdge {
	"""
	The item at the end of the edge
	"""
	node: User!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}

directive @ifAllowed on FIELD
